##/bin/bash
# vim:ts=2
# program: Knowhow about dockerfile
# made by: Engells
# date: Apr 8, 2019
# content: Just for memo



語法
====================
FROM         : 基底 image
MAINTAINER   : 維護者資訊
ENV          : 環境變數，可有多個。在 RUN 指令建置 image 時應用，啟動 container 時亦會使用。
RUN          : 建置 image 時執行之指令，如 apt update && apt install -y xxxx，可使用多個 Run
CMD          : 啟動 container 時執行之指令，建議格式為 RUN ["executable","param1","param2"]，只能使用一個 CMD
EXPOSE       : 啟動 container 時監聽之 port
SHELL        : SHELL 種類，預設值為 SHELL ["/bin/sh","-c"]
LABEL        : 標籤中繼資訊，可有多個。示例 LABEL version="1.9"
ADD          : 將 <srv> 資料複製至 <dest>。示例 ADD https://****.**** /mnt/****
COPY         : 將 host <srv> 資料複製至 <dest>
ENTRYPOINT   : 只能使用一個
VOLUME       : 建立 Volume 掛載點。例如 VOLUME ["/mnt/data"]，則啟動 container 時會建立 /mnt/data 目錄，掛載來源為 docker volume 等
USER         : 啟動 container 時，在 container 的 user
WORKDIR      : 啟動 container 時，在 container 的工作目錄
ARG          : image 內使用的引數
ONBUILD      : 本 image 作為其他 image 的基底時。所自動執行之指令
STOPSINGAL   : 退出 container 的信號值
HEALTHCHECK  : 啟動 container 時狀態檢查方式




Dockerfile
====================
docker build -f /path/to/dockerfile -t tag_name work_dir
  # docker build -t hello-world https://github.com/docker-library/hello-world.git#master:amd64/hello-world
  # docker build - < Dockerfile or cat Dockerfile | docker build -
  # docker build - < context.tar.gz




Minimum image file
====================
FROM golang:alpine AS build-env
WORKDIR /app
ADD . /app
RUN cd /app && go build -o goapp

FROM alpine
RUN apk update && \
   apk add ca-certificates && \
   update-ca-certificates && \
   rm -rf /var/cache/apk/*
WORKDIR /app
COPY --from=build-env /app/goapp /app
EXPOSE 8080
ENTRYPOINT ./goapp


