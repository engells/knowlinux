##!/bin/bash
# vim:ts=4
# program: Knowhow about Podman
# made by: Engells
# date: Jan 23, 2024
# content: Test install fcitx5 in distrobox cntr sucessefully.



常用指令
====================
啟動 Container
  distrobox enter cntr_name --no-workdir
    # ref: https://github.com/89luca89/distrobox/blob/main/docs/usage/distrobox-enter.md

移除 Container
  distrobox rm cntr_name [--force/-f] [--verbose/-v] [--all/-a]
    # 需先以 podman stop cntr_name 停止 cntr，再執行 distrobox rm cntr_name




建立及使用持續性容器(容器在退出 shell 後仍會存在系統)
====================
建立容器
  distrobox create --name xxxx --image docker.io/library/archlinux:latest --home /path/to/target
    # --image，指定容器來源映像檔，否則使用預設映像檔
    # --home，容器預設存取 $HOME 目錄檔案，可用 --home 旗標指定其他目錄存放容器產生的檔案，目錄鏈中不能存在軟連結型態目錄，distrobox 會回報找不到指定目錄或檔案
    # --additional-flags "--env EDITOR=vim"，給容器添加環境變數
    # --additional-packages "git tmux vim"，設定預先要安裝的套件
    # --volume /host/dir:/container/dir:rw，掛載 docker volume
    # --unshare-netns，不要跟宿主機用一樣的網路IP
    # --root，賦予容器 root 權限，不建議使用。另外切忌使用 sudo distrobox
    # distrobox 可跑圖形應用程式。如需顯卡加速，Intel/AMD 顯卡不需其他處置，但 Nvidia 顯卡，Linux 宿主機本身要裝 Nvidia 專有驅動外，建立容器得加上 --nvidia 旗標
    # distrobox-create --name xxxx --nvidia --image docker.io/library/archlinux:latest
    # distrobox create --name xxxx --additional-flags "--runtime=nvidia -e NVIDIA_VISIBLE_DEVICES=all -e NVIDIA_DRIVER_CAPABILITIES=all" --image ....

建立捷徑
  distrobox export
    # 在容器內執行該指令，可將容器裡面的應用程式建立捷徑在宿主機的應用程式列表，例如讓 Arch linux 的 Firefox-esr 顯示在宿主機應用程式列表。
    # distrobox export --app firefox-esr --extra-flags "--private-window "
    #  只匯出應用程式，並帶入啟動引數，建立捷徑
    # distrobox export --bin /usr/bin/firefox-esr --extra-flags "--private-window" --export-path $HOME/.local/bin
    #  匯出二進位檔路徑，帶入啟動引數，並在 $HOME/.local/bin 建立 wrapper，宿主機其他程式便可使用容器的 firefox-esr，需將 $HOME/.local/bin 加入 $PATH
    # distrobox export --app firefox-esr --delete
    #  在容器內執行該指令，收回捷徑
    # distrobox export --bin /usr/bin/firefox-esr --export-path home/user/.local/bin --delete
    #  在容器內執行該指令，收回 wrapper
  distrobox generate-entry
    # 在宿主機執行該指令，宿主機的應用程式列建立啟動「Distrobox容器終端機」的捷徑。
    # distrobox generate-entry container_name
    # distrobox generate-entry container_name --delete

複製容器
  distrobox create --clone xxxx --name xxxx_2 --nvidia --home /path/to/dir_for_xxxx_2
    # --clone 旗標，複製現有的容器，可繼承來源容器的環境變數、entrypoint、家目錄資料
    # 旗標不會繼承，若要開放 Nvidia 存取，必需自行加入 --nvidia

建立暫時性的容器
  distrobox ephemeral --image docker.io/library/archlinux:latest -- cat /etc/os-release
    # 建立暫時性的容器，此容器在命令完成後就會自動刪除，就像 docker run --rm 那樣。
    # - cat /etc/os-release，要容器執行的指令
    # distrobox ephemeral 可以沿用 distrobox create 的旗標，例如掛載 Docker volume 給容器暫時存取

使用輸入法
  




組態
====================
Distrobox 的設定檔用於定義預設行為，設定檔路徑讀取順序如下
  /usr/share/distrobox/distrobox.conf
  /usr/etc/distrobox/distrobox.conf
  /etc/distrobox/distrobox.conf
  ${HOME}/.config/distrobox/distrobox.conf
  ${HOME}/.distroboxrc




安裝 distrobox: rootless mode
====================
install podman
  以 apt 或 pacman 安裝 podman 或 docker
install distrobox
  curl -s https://raw.githubusercontent.com/89luca89/distrobox/main/install | sh -s -- --next --prefix $HOME/.local
  # 移除指令 curl -s https://raw.githubusercontent.com/89luca89/distrobox/main/uninstall | sh -s -- --prefix $HOME/.local
edit $HOME/.bashrc
  # Podman 和 Distrobox 的路徑
  PATH=$PATH:$HOME/.local/podman/bin:$HOME/.local/bin
  # 允許所有應用程式顯示在螢幕上（需安裝 xhost）
  xhost +si:localuser:$USER




概述及摘要
====================
圖形化界面管理 Distrobox 容器
  Docker 為 Distrobox後端，則市面上任一 Docker 的圖形界面都可以用來管理 Distrobox 所建立的容器，例如 Portainer。
  Podman 為 後端，可安裝 Pods Flatpak 來管理容器

使用輸入法(實作 fcitx5 成功)
  distrobox enter -n cntr_name --no-workdir
  apt install ibus ibus-chewing (cntr)
  ibus-setup (cntr)
  ibus restart (cntr)
  ibus-setup (host)
  distrobox enter -n cntr_name --no-workdir -- ibus-daemon -drx
  ----
  edit /etc/environment
    export GTK_IM_MODULE=xim
    export QT_IM_MODULE=xim
    export XMODIFIERS=@im=fcitx
  enable locale in /etc/locale.gen and run locale-gen (cntr)

Refs:
  Distrobox 使用教學，透過容器安裝其他 Linux 發行版的套件 :: https://ivonblog.com/posts/distrobox-usage/
  how to input chinese :: https://github.com/89luca89/distrobox/issues/957
  Linux的输入法框架 :: https://zhuanlan.zhihu.com/p/384171267

Memo:
  安裝 arch linux cntr => enter and exit cntr => copy .zshrc and oh-my-zsh into cntr home dir => enter cntr, pacman-key --init && pacman-key --populate \
  => distrobox-upgrade cntr => enter cntr => install git base-devel yay


