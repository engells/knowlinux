##/bin/bash
# vim:ts=2
# program: Knowhow about docker-compose
# made by: Engells
# date: Mar 26, 2021
# content: Just for memo



docker-compose.yml 語法
====================
build
  指定 Dockerfile 檔案所在路徑，可為絕對路徑，或者相對 docker-compose.yml 檔案的路徑。 Compose 將會利用它自動構建這個鏡像，然後使用這個鏡像。

image
  指定為鏡像名稱或鏡像 ID。如果鏡像在本地不存在，Compose 會嘗試拉取這個鏡像。image: ubuntu

expose
  開放容器埠，但不映射到宿主機，只被連接的服務訪問。僅可以指定內部埠為參數。expose: - "3000" - "8000"

ports
  開放埠信息。使用 HOST:CONTAINER 格式，或僅指定容器的埠，宿主採隨機選擇埠。ports: - "3000" - "49100:22"

network_mode
  設置網路模式。使用和 docker run 的 --network 參數一樣的值。network_mode: "bridge"

networks
  配置容器連接的網路。
    services:
      some-service:
      networks:
       - some-network
       - other-network
​
    networks:
      some-network:
      other-network:

volumes
  volume 所掛載路徑設置。可為 HOST:CONTAINER 或 VOLUME:CONTAINER，可設唯讀模式：HOST:CONTAINER:ro
  如果路徑為 volume 名稱，必須在檔案中配置 volume 。
    services:
      my_src:
        image: mysql:8.0
        volumes:
          - mysql_data:/var/lib/mysql
​
    volumes:
      mysql_data:

tmpfs
  掛載一個 tmpfs 檔案系統到容器。tmpfs: - /run - /tmp

logging
  配置日誌選項。
    logging:
      driver: ["syslog" | "json-file" | "none"]
       options:
         syslog-address: "tcp://192.168.0.42:123"
         max-size: "200k"
         max-file: "10"

environment
  設置環境變量。你可以使用數組或字典兩種格式。environment:- RACK_ENV=development - SESSION_SECRET
  如果變量名稱或者值中用到 true|false，yes|no 等表達 布爾 含義的詞匯，最好放到引號里，避免 YAML 自動解析某些內容為對應的布爾語義。這些特定詞匯，包括
  y|Y|yes|Yes|YES|n|N|no|No|NO|true|True|TRUE|false|False|FALSE|on|On|ON|off|Off|OFF

env_file
  從檔案中獲取環境變量，可為單獨的檔案路徑或列表。如果 docker-compose -f FILE 指定 Compose 模板檔案，則 env_file 中變量的路徑會基於模板檔案路徑。
  如果變量名稱與 environment 指令沖突，以後者為準。環境變量檔案中每一行必須符合格式 PROG_ENV=development ，支持 # 開頭的註釋行。
  env_file: - ./common.env - ./apps/web.env - /opt/secrets.env

labels
  為容器添加 Docker 元數據（metadata）信息。例如可以為容器添加輔助說明信息。labels: com.startupteam.description: "webapp for a startup team"

cap_add, cap_drop
  指定容器的內核能力（capacity）分配。例如，讓容器擁有所有能力可以指定為：cap_add: - ALL。去掉 NET_ADMIN 能力可以指定為：cap_drop: - NET_ADMIN

command
  覆蓋容器啟動後默認執行的命令。command: echo "hello world"

cgroup_parent
  指定父 cgroup 組，意味著將繼承該組的資源限制。

container_name
  指定容器名稱。默認將會使用 項目名稱_服務名稱_序號 這樣的格式。container_name: docker-web-container

devices
  指定設備映射關系。devices: - "/dev/ttyUSB1:/dev/ttyUSB0"

depends_on
  解決容器的依賴、啟動先後的問題。以下例子中會先啟動 redis db 再啟動 web。​depends_on: - db - redis

dns
  自定義 DNS 服務器。可以是一個值，也可以是一個列表。dns: - 8.8.8.8 - 114.114.114.114

dns_search
  配置 DNS 搜索域。可以是一個值，也可以是一個列表。dns_search: - domain1.example.com - domain2.example.com

extra_hosts
  類似 Docker 中的 --add-host 參數，指定額外的 host 名稱映射信息。extra_hosts: - "googledns:8.8.8.8" - "dockerhub:52.1.157.61"
  會在啟動後的服務容器中 /etc/hosts 檔案中添加如下兩條條目。8.8.8.8 googledns 52.1.157.61 dockerhub

healthcheck
  檢查容器是否健康運行。
​
pid
  跟主機系統共用進程命名空間。打開該選項的容器之間，以及容器和宿主機系統之間可以通過進程 ID 來相互訪問和操作。pid: "host"

secrets
  存儲敏感數據，例如 mysql 服務密碼。

security_opt
  指定容器模板標簽（label）機制的默認屬性（用戶、角色、類型、級別等）。例如配置標簽的用戶名和角色名。security_opt: - label:user:USER - label:role:ROLE

stop_signal
  設置另一個信號來停止容器。在默認情況下使用的是 SIGTERM 停止容器。stop_signal: SIGUSR1

sysctls
  配置容器內核參數。sysctls: net.core.somaxconn: 1024 net.ipv4.tcp_syncookies: 0

ulimits
  指定容器的 ulimits 限制值。

configs
  僅用於 Swarm mode

deploy
  僅用於 Swarm mode

其它指令
  此外還有 domainname, entrypoint, hostname, ipc, mac_address, privileged, read_only, shm_size, restart, stdin_open, tty, user, working_dir 等
  指令，基本跟 docker run 中對應參數的功能一致。

變數優先度
  yml environment > shell > .env > Dockfile




docker-compose
====================
安裝(with root authority)
  方式一
    apt install docker-compose
  方式二
	  curl -L https://github.com/docker/compose/releases/download/1.24.0-rc3/docker-compose-`uname -s`-`uname -m` \
      -o /usr/local/bin/docker-compose
  	chmod +x /usr/local/bin/docker-compose

URL:
	https://github.com/docker/compose/releases


