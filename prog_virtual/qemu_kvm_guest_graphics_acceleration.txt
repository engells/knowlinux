##/bin/bash
# vim:ts=4
# program: knowhow about QEMU Passthrough
# made by: Engells
# date: Jan 3, 2024
# content: 



Guest graphics acceleration
====================
QXL video driver and SPICE client for display
  常規顯示方式，在 virt-manager 設定虛擬機設置如下
      Display: Type: Spice Server + Listen Type: Address + Port: Auto ;; Video Model: virtio

PCI GPU passthrough
  PCI VGA/GPU passthrough via OVMF
  Looking Glass

GPU virtualization
  SR-IOV
  Virgil3d
    使用 VirGL(virtio-gl) 及 virtio-gpu(GPU time shareing solution) 技術，常使用 virglrenderer 套件，在 virt-manager 設定虛擬機設置如下
      Display: Type: Spice Server + Listen Type: None + OpenGL: V ;; Video Model: virtio + 3D acceleration: V

Ref
  ArchWiki :: https://wiki.archlinux.org/title/QEMU/Guest_graphics_acceleration
  Single GPU Passthrough :: https://gitlab.com/risingprismtv/single-gpu-passthrough/-/wikis/1)-Preparations




PCI VGA/GPU passthrough via OVMF
====================
啟用 Linux kernel IOMMU，並查詢獨立顯卡 id
  edit /etc/default/grub
    GRUB_CMDLINE_LINUX_DEFAULT="... intel_iommu=on iommu=pt"
  sudo update-grub && sudo reboot
  lspci -nnk or lspci -nn | grep -i nvidia or dmesg | grep -e DMAR -e IOMMU
  edit /etc/default/grub
    GRUB_CMDLINE_LINUX_DEFAULT="... intel_iommu=on iommu=pt video=efifb:off rd.driver.pre=vfio-pci vfio-pci.ids=xxxx:xxxx,xxxx:xxxx pcie_acs_override=downstream"
    # 部份文件編輯 /etc/modprobe.d/vfio.conf，寫入 options vfio-pci ids=xxxx:xxxx,xxxx:xxxx，實作在 Linux Mint 21.2 Kernel 6.5 環境下，前述作法有效
    #   VFIO 在 Kernel 5.8 後已整合進核心套件而非 Module，故部分 Linux Distro 採 /etc/modrrobe.d/xxxx.conf 設置 PCI 隔離無效
    # Arch Linux 設置 GRUB_CMDLINE_LINUX_DEFAULT="... intel_iommu=on iommu=pt video=efifb:off vfio-pci.ids=xxxx:xxxx,xxxx:xxxx"
    # iommu=pt 參數，防止Linux試圖接觸(touching)無法直通的設備
    # video=efifb:off 參數，若顯卡插在主機板第一條 PCI-E，才需要加
    # rd.driver.pre=vfio-pci 參數，loads the vfio-pci stub driver in the ram drive before booting.
    # pcie_acs_override=downstream 加入此參數，分組後可把繪圖裝置跟聲音裝置分別直通給不同 VM。沒加此參數，分組後直通顯卡會同步綁定繪圖裝置跟聲音裝置

開機自動載入 vfio-pci 核心模組
  edit /etc/modules-load.d/vfio-pci.conf，檔名任意
    sudo echo 'vfio-pci' > /etc/modules-load.d/vfio-pci.conf
    # 視情況加入 vfio 及 vfio_iommu_type1 模組
    # Arch Linux 設置 /etc/mkinitcpio.conf，MODULES=(vfio_pci vfio vfio_iommu_type1 vfio_virqfd)，且 HOOKS=(... modconf ...)
    # 自內核 6.2 版本開始，vfio_virqfd 的功能已經並入 vfio 模組
    # 本步驟可採手動指令方式替代 sudo modprobe vfio_pci && sudo modprobe vfio_iommu_type1 && sudo modprobe vfio

禁止開機載入 Nvidia 和 nouveau 核心模組
  edit /etc/modprobe.d/blacklist-nvidia，檔名任意
    sudo echo "blacklist nvidia" >> /etc/modprobe.d/blacklist-nvidia
    sudo echo "blacklist nouveau" >> /etc/modprobe.d/blacklist-nvidia

允許不正常中斷(選用)
  edit /etc/modprobe.d/iommu_unsafe_interrupts.conf，檔名任意
    sudo echo "options vfio_iommu_type1 allow_unsafe_interrupts=1" > /etc/modprobe.d/iommu-unsafe-interrupts.conf

修改 kvm 組態(選用)
  edit /etc/modprobe.d/kvm.conf，此擋在 Linux Mint 未存在
    options kvm ignore_msrs=1
    options kvm report_ignored_msrs=0

更新 GRUB 和 initramfs 並重開機
  sudo update-grub && sudo update-initramfs -u or update-initramfs -u -k all && sudo reboot
  # Arch Linux 指令 sudo mkinitcpio -p linux

設定 BIOS 開啟混合螢幕輸出
  Advanced → System Agent (SA) Configuration → IGFX，設定以內顯優先開機

檢視 IOMMU 及 VFIO 情形
  dmesg | grep -E "DMAR|IOMMU"
  dmesg | grep -i vfio or lsmod | grep vfio               # 檢查 vfio 模組是否運作，即使 vfio 已運行，仍需確認裝置的驅動是 vfio-pci，而非 i915 等
  lspci -k | grep -E "NVIDIA" or lspci -nnk -d xxxx:xxxx  # 檢查 GPU 是否已被 vfio-pci 使用

將獨顯加入到虛擬機
  Virt Manager => VM => Add Hardwares => 新增 PCI 裝置，加入獨顯和獨顯音訊 HDMI
  VM 開機後，主螢幕看到 Windows 畫面，副螢幕暫時黑畫面 => VM 安裝 GeForce 顯示卡驅動 => VM 系統設定 → 顯示器 → 圖形，指定 Nvidia 顯卡，而非 QXL

安裝Looking Glass，Looking Glass Host 與 Client 的版本需一致
  sudo apt update && sudo apt install looking-glass-client
  apt-cache showpkg looking-glass-client


Refs
  Ubuntu：Windows 虛擬機 Nvidia 顯示卡直通 ＋ Looking Glass 安裝 :: https://ivonblog.com/posts/ubuntu-gpu-passthrough/
  在 Windows 虛擬機玩遊戲 ～ Linux QEMU/KVM 雙 GPU 直通 ＋ Looking Glass 安裝過程 :: https://ivonblog.com/posts/qemu-kvm-vfio-gaming/
  KVM/QEMU 虛擬機器設定 GPU Passthrough 記錄 :: https://blog.gtwang.org/linux/ubuntu-linux-kvm-qemu-gpu-passthrough-tutorial/
  Arch Linux 將 Nvidia GPU 直通給 Windows QEMU/KVM 虛擬機 :: https://ivonblog.com/posts/archlinux-gpu-passthrough/
  GPU Passthrough設定及一些眉角分享 :: https://www.ptt.cc/bbs/Linux/M.1622355127.A.128.html
  PTT GPU Passthrough設定及一些眉角分享 :: https://www.ptt.cc/bbs/Linux/M.1622355127.A.128.html
  Fedora qemu/kvm gpu 直通(passthrough) 筆記 :: https://hackmd.io/@U9m9FarsR0SQGVuSmTJNiw/HkBjGlwuq
  雙顯卡筆記本獨顯直通 :: https://www.codeplayer.org/Blog/%E5%8F%8C%E6%98%BE%E5%8D%A1%E7%AC%94%E8%AE%B0%E6%9C%AC%E7%8B%AC%E6%98%BE%E7%9B%B4%E9%80%9A.html
  Virtual machines with PCI passthrough on Ubuntu 20.04 :: https://mathiashueber.com/pci-passthrough-ubuntu-2004-virtual-machine/
  Single GPU Passthrough :: https://gitlab.com/risingprismtv/single-gpu-passthrough/-/wikis/1)-Preparations
  GPU-Passthrough-Manager :: https://github.com/uwzis/gpu-passthrough-manager
  Building the Linux kernel for dedicated hardware VMs :: https://some-natalie.dev/blog/fedora-acs-override/
  Windows VM with GPU Passthrough, Part 3: Setting up Looking Glass :: https://quantum5.ca/2022/09/18/windows-vm-gpu-passthrough-part-3-setting-up-looking-glass/




Memo
====================
iommu 設置後，系統 iommu 群組檔案
  /sys/class/iommu ; /sys/kernel/iommu_groups/ ; 

手動配置 vfio pci 裝置(需搭配 initramfs 更新)
  Debian like
    /etc/modules-load.d/xxxx.conf
    /etc/initramfs-tools/scripts/init-top/xxxx.sh
  Arch Linux like
    /etc/mkinitcpio.conf
      MODULES=( ... vfat vfio-pci vfio_iommu_type1 ... )
      FILES=(/etc/modprobe.d/vfio.conf /path/to/vfio_pci_override.sh)
    /etc/modprobe.d/vfio.conf
      install vfio-pci /path/to/vfio_pci_override.sh 
    /path/to/vfio_pci_override.sh
      ...
      echo "vfio-pci" > /sys/bus/pci/devices/$GROUP/$DEV/driver_override
      ...
      modprobe -i vfio-pci
  Common
    /etc/modprobe.d/xxxx.conf

開機後，手動配置 vfio pci 裝置(純粹參考)
  echo '0000:03:00.0' > /sys/bus/pci/devices/0000:03:00.0/driver/unbind
  echo '8086 56a5'    > /sys/bus/pci/drivers/vfio-pci/new_id
  echo '0000:03:00.0' > /sys/bus/pci/devices/0000:03:00.0/driver/bind
  echo '8086 56a5'    > /sys/bus/pci/drivers/vfio-pci/remove_id

  echo 1 > /sys/bus/pci/devices/0000:03:00.0/remove,rescan,reset
  echo "8086 56a5" > /sys/bus/pci/drivers/vfio-pci/new_id
  echo 1 > "/sys/bus/pci/rescan"


