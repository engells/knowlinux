# #!/bin/bash
# vim:ts=2
# program: Using to note knowhow about shell scripts
# made by: Engells
# date: Feb 22, 2024
# content: Just for memo



執行 script 方式
====================
cd /path/to && ./script_file       以子 shell 環境執行
/path/to/script_file               以子 shell 環境執行
cd /path/to && bash script_file    也可以使用 sh 指令，以子 shell 環境執行
. /path/to/script_file             在現行 shell 環境執行
source /path/to/script_file        在現行 shell 環境執行



字元
====================
*
?
\
'
"
/bin/z{,[ef]gre,cm}p  代表/bin目錄中zp、zegrep、zfgrep及zcmp四個檔案，注意中括弧及大括弧用法
.
  可表示工作目錄(pws)、或是在目前shell執行指令、或是單純的.字元，而在正則表示法中代表任一字元。
  承上，在bash中.*表示以.這個字元起頭的字串，字串長度最小為1，因為至少有.這個字元；
  而在正則表示法中.*代表任意字元組成的字串，字串長度最小為0，因為*在正則表示法中代表零至多個在*左邊字元
  此外^.*$在正則表示法中表示列首與列尾中有零至多個任意字元，如此也就包含空白列的情形在內了



輸入輸出轉向及管線
====================
0	標準輸入
1	標準輸出
2	標準錯誤
指令 >	轉向輸出目的檔案
指令 >>	轉向附加目的檔案
指令 <	輸入檔案
指令 <	輸入檔案 > 輸出檔案
指令1 | 指令2 | 指令3 | ... | 指令n
指令 &



一次執行多個指令
====================
指令1; 指令2; 指令3
{ 指令1; 指令2; 指令3; }  每個指令都需以;結尾，且大括弧與指令間需有一個以上空白字元，在現行 shell 環境依序執行指令
(指令1; 指令2; 指令3; )   以子 shell 環境依序執行指令
指令1 && 指令2 && 指令3   若指令1執行成功，則執行指令2；若指令2執行成功，則執行指令3；以此循序執行
指令1 || 指令2 || 指令3   若指令1執行失敗，則執行指令2；若指令2執行失敗，則執行指令3；以此循序執行



變數
====================
變數=值 或 變數='值' 或 變數="值"  設定變數
$變數 或 ${變數}                 引用變數值
unset 變數                      取消變數
變數=                           清空變數，即將變數值設為空值(null)
export 變數                     將變數設定為環境變數
readonly 變數                   將變數設定為唯讀
declare 參數 變數

$1~$n           n 大於 10 需加上大括號，如 ${10}，與引用變數格式相同，常用於 script
$*              取得所有的變數，字串模式
$@              取得所有的變數，各變數獨立
$#              計算變數的個數
$?              上一個程序執行後傳回值，通常 0 代表執行成功，非 0 代表執行有誤

變數[n]=值 或 變數=([n1]=值1 [n2]=值2 [n3]=值3) 或 變數=(值1 值2 值3)  設定陣列變數
${變數[n]}                        取出指定元素
${變數[*]}                        取出所有元素，字串模式
${變數[@]}                        取出所有元素，各元素獨立
${#變數[@]} 或 ${#變數[*]}         取得陣列元素個數
${#變數[n]}                       取得字串型元素長度
unset 變數                        取消整個陣列變數
unset 變數[n]                     取消某個元素

${變數:-預設值}                    若變數不存在或為空值，則傳回預設值；若變數存在且不為空值，則傳回變數值
${變數:=預設值}                    若變數不存在或為空值，則設定變數=預設值；若變數存在且不為空值，則傳回變數值
${變數:?提示訊息}                   若變數不存在或為空值，則傳回提示訊息；若變數存在且不為空值，則傳回變數值
${變數:+真值}	                     若變數存在且不為空值，則傳回真值；否則傳回空值
:用來測空值；-用來測不存在；+用來測不存在

${變數:起點位置:長度}                 常用於字串型變數
${@:起點:個數}                     常用於script
${#變數}                          取得字串長度

${變數#字串樣式}
${變數##字串樣式}
${變數%字串樣式}
${變數%%字串樣式}
${變數/字串樣式/}
${變數//字串樣式/}
${變數/#字串樣式/} 等同 ${變數##字串樣式}
${變數/%字串樣式/}} 等同 ${變數%%字串樣式}
${變數/字串樣式/替換字串}
${變數//字串樣式/替換字串}
${變數/#字串樣式/替換字串}
${變數/%字串樣式/替換字串}

${!開頭字串@} 或 ${!開頭字串*}				取得變數名稱列表
${!陣列變數[@]} 或 ${!陣列變數[*]}			取得陣列索引列表



指令替換
====================
變數=$(指令1; 指令2)
變數=`指令`



記錄指令執行過程
====================
script 記錄檔



Function語法
====================
function 函式名稱 ()			p252
{
  指令區塊
}

函式名稱 ()
{
  指令區塊
}

function 函式名稱
{
  指令區塊
}

return					p255，終止函式

函式作用範圍				p257，現行shell，若要在子shell執行，用內建指令：export -f 函式名稱
變數作用範圍				p257

移動位置參數：shift			p262
指定（重置）位置參數：set		p263，一次將所有位置參數之值設為空值：set --
					指定（重置）位置參數時，原有的位置參數會播保存，其內含值不受影響，p265
取用命令列的選項與參數：getopts		p267

建立函式庫				p268

遞迴函式				p270



IF 語法
====================
if 條件測試1 ; then
 指令區塊1
elseif 條件測試2 ; then
 指令區塊2
else
 指令區塊3
fi

grep -q "rm" macro.sh			p215
! grep -q "rm" macro.sh			p216
((算式))				p216
[[ 判斷式 ]]				p217
[ 判斷式 ]				p218
test 判斷式				p217
-a 及 -o				p219
指令1  && 指令2				p219
指令1 || 指令2				p220
&&與||合用				p221

檔案屬性的判斷式			p225，-e、-f、-d、-c、-p、-L、-S、-r、-w、-x、-nt、-ot、﹍
關於字串的判斷式			p226，-z、-n、字串、==、=、!=、>、<
關於算式的判斷式			p228，-eq、-ne、-gt、-ge、-lt、-le
關於bash選項的判斷式			p229，-o set的選項名稱




CASE 語法
==============================
case 待測項 in				p230
  (樣式串列1)				指令區塊1 ;;
  樣式串列2)				指令區塊2 ;;
  樣式串列3)				指令區塊3 ;;
  ...
  *)					指令區塊 ;;
esac



FOR 語法
==============================
for 變數 in				p234
do
  指令區塊
done

for ((初始條件; 終止條件; 異動項))	p236
do
  指令區塊
done

break					p245
continue				p246



Select 語法
==============================
select 選項變數 in 串列			p242
do
  指令區塊
done



While 語法
==============================
while 條件測試				p237
do
  指令區塊
done



Until 語法
==============================
until 條件測試				p241
do
  指令區塊
done

