## vim:ts=4
# program: Memo thr package of panda
# made by: Engells
# date: Feb 5, 2021
# content: Just for memo




Series
====================
產生 Series
---------------
obj_serial = pd.Series(range(10),index=['a', 'a', 'b', 'b', 'b', 'c', 'c', 'c', 'c', 'c'])
obj_serial = pd.Series([4, 7, -5, 3], , index=['a', 'b', 'c', 'd'])
dic_data = {'name':'pineapple','birthday':'1996-1-1','luckynumber':7 }
obj_serial = pd.Series(dic_data)


查詢 Series 相關資訊
---------------
pd.Series.values
pd.Series.index


選取 Series 內部資料
---------------
pd.Series[index_ref] 


編輯 DataFrame 內部資料
---------------




DataFrame
====================
產生 DataFrame 與存檔
---------------
obj_frame = pd.DataFrame(dict_data, columns=[], index=[[])    # 可更改 columns 順序
obj_pandas.read_csv(檔案名稱)、 obj_pandas.read_json(檔案名稱)、 obj_pandas.read_html(檔案名稱)
  # pd.read_table(url/to/file, sep = ":", header = TRUE) sep = '\t'
  # pd.read_excel(url/to/file)
  # pd.read_json(url/to/file)
obj_frame.to_csv(檔案名稱)、 obj_frame.to_json(檔案名稱)、 obj_frame.to_html(檔案名稱)、 obj_frame.to_excel(檔案名稱)


查詢 DataFrame 相關資訊
---------------
pandas.DataFrame.info()、 pandas.DataFrame.describe()
pandas.DataFrame.index、 pandas.DataFrame.columns
pandas.DataFrame.head()、 pandas.DataFrame.tail()


選取 DataFrame 內部資料
---------------
pandas.DataFrame[column_name][index_name_ref | index_number_ref]
pandas.DataFrame[[column_name1, column_name2, ... ]][index_name_ref | index_number_ref]
pandas.DataFrame.loc[row_name_ref, column_name_ref]
pandas.DataFrame.iloc[row_number_ref, column_number_ref]

pandas.DataFrame['column_name'].isin(['value1', 'value2', 'value3', ...])
pandas.DataFrame['column_name'].isnull()
pandas.DataFrame['column_name'].notnull()
pandas.DataFrame['column_name'].between('value1', 'value2')
pandas.DataFrame[(filter1 | filter2)] 、 pandas.DataFrame[(filter1 & filter2)]
pandas.DataFrame[]== | != | < | <= | > | >=


編輯 DataFrame 內部資料
---------------
pandas.DataFrame.sort_values("column_name", ascending= False)
pandas.DataFrame.drop(['column_name'], axis=1)    # 記得要給定 axis=1 或 axis="columns" 為欄。若 axis=0 或 asxis = "row" 為代表列
pandas.DataFrame.drop(labels=["Box Office","Actor"], axis="columns")    # axis=1 => axis="columns"， axis=0 => asxis = "row"
    # labels=None, axis=0, index=None, columns=None, inplace=False
pandas.DataFrame.dropna()    # 刪除 NaN 的資料
pandas.DataFrame.fillna(0)    # 亦可將 NaN 換為 0 以外之數值或字串
pandas.DataFrame.insert()
pandas.DataFrame.concat(obj1, obj2 ...)    # 列合併，垂直方向合併
pandas.DataFrame.merge(obj1, obj2 ...)     # 欄位合併，水平方向合併


Intro
---------------
DataFrame 是 Pandas 最重要的資料結構，基本上使用 Pandas 進行資料分析和操作大部分都是在使用 DataFrame。DataFrame 的結構類似於關聯式資料庫的資料表（table）是由欄（column）和列的索引（index）所組成。索引相當於試算表 sheet 的 row name。




Index & MultiIndex
====================
自定義 index
---------------
obj_frame = pd.read_csv("/path/to/file", index_col="column_name")
obj_frame = pd.read_csv("/path/to/file", index_col=["column_name1", "column_name2"]) 

obj_frame.set_index("column_name", inplace = True)    # inplace=True is needed
obj_frame.set_index(keys = ["column_name1", "column_name2"], inplace = True)

obj_frame.reset_index(inplace = True)           # restore the original index


查詢 index
---------------
pandas.DataFrame.index
pandas.DataFrame.index.names
pandas.DataFrame.index.get_level_values(index_number_ref | index_name_ref)


index 排序
---------------
pandas.DataFrame.sort_index(inplace = True)


更改 index 或欄位的名稱
---------------
pandas.DataFrame.rename(columns={"Year":"Release Date","Box Office":"Revenue"} ,inplace = True)   # rename column name
pandas.DataFrame.rename(index={"Dr. No":"Doctor No", "GoldenEye":"Golden Eye", "The World Is Not Enough":"Best bond Movie Ever"}, inplace = True)
pandas.DataFrame.index.set_names(["index_name1", "index_name2"], inplace = True)




Groupby == SQL GROUP BY
====================
pandas.DataFrame.groupby("column_name")
type(obj_frame.groupby("column_name"))     
pandas.DataFrame.groupby("column_name").size()
pandas.DataFrame.groupby("column_name").get_group("class_name")




String
====================
obj_string.lower(), obj_string.upper(), obj_string.title(), obj_string.len()
pandas.DataFrame.str.lower() , obj_frame.str.upper(), obj_frame.str.title(), obj_frame.str.len(), obj_frame.str.replace()
pandas.DataFrame.str.startswith(), obj_frame.str.endswith(), obj_frame.str.contains(), obj_frame.str.split()

chicago["Position Title"].str.lower().str.contains("water").head()
mask = chicago["Position Title"].str.lower().str.startswith("water")
chicago[mask].head() 




Plot
====================
pandas.DataFrame.plot(*args, **kwargs)



