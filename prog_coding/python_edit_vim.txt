#!/bin/bash
# vim:ts=4
# program: Using to note the knowledge about vim
# made by: Engells
# date: Sep 6, 2025
# content: Just for memo



neovim as ide of python
====================
安裝套件
  安裝 nv: curl -LsSf https://astral.sh/uv/install.sh | sh
  安裝 homebrew: /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  安裝 neovim pyright fzf: brew install neovim pyright fzf
  安裝 lazyvim: git clone https://github.com/LazyVim/starter ~/.config/nvim && rm -rf ~/.config/nvim/.git && nvim

Ref:
  lsp 让neovim 更懂你的代码 :: https://www.youtube.com/watch?v=Qi8XdDzhcpU




vim as ide of python
====================
改安裝 vim-nox
  apt remove vim && apt install vim-nox


安裝 jedi 支援
  pip3 install jedi


安裝 vim plugin
  tmhedberg/SimpylFold              <= 支援摺疊
  vim-scripts/indentpython.vim      <= 支援縮排
  Valloric/YouCompleteMe            <= 自動補全，需先用 pip 安装 jedi 模組
  scrooloose/syntastic              <= 語法檢查
  nvie/vim-flake8                   <= PEP8，需先用 pip 安装 flake8 模組，然後安裝
  jnurmine/Zenburn                  <= 佈景
  altercation/vim-colors-solarized  <= 佈景
  scrooloose/nerdtree
  jistr/vim-nerdtree-tabs
  kien/ctrlp.vim                    <= Control + P 搜索
  tpope/vim-fugitive                <= 支援 git 指令
  ----
  w0rp/ale                          <= 考慮取代 syntastic
  python-mode/python-mode           <= syntax 支援強化，hi pythonSelf ctermfg=174 guifg=#6094DB cterm=bold gui=bold
  google/yapf                       <= 語法格式化，autocmd FileType python nnoremap <LocalLeader>= :0,$!yapf<CR>，=**= autopep8 和 pep8ify
  davidhalter/jedi-vim
  
  

參考資料：
  http://codingpy.com/article/vim-and-python-match-in-heaven/
  https://www.zhihu.com/question/19655689




標示多餘空白
====================
highlight BadWhitespace ctermbg=red guibg=darkred
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/





YouCompleteMe
====================
let g:ycm_autoclose_preview_window_after_completion=1           " 持續顯示自動補全窗口
map <leader>g  :YcmCompleter GoToDefinitionElseDeclaration<CR>  " 以 <leader>g 跳轉至 Dfinition
let g:ycm_python_binary_path = '/usr/bin/python3.5'
let g:ycm_server_python_interpreter='/usr/bin/python3'          " 不確定與上行關係


參考資料：
  http://www.bijishequ.com/detail/516025?p=




jedi-vim
====================
在 ~/.bashrc 加入下列語句：
  export PYTHONSTARTUP="$(python -m jedi repl)" 

若在 python virtualenv 環境中抓不到 django 所在目錄，暫解方式在 .vimrc 中加入：
" Add the virtualenv's site-packages to vim path
if has('python')
  py << EOF
    import os.path
    import sys
    import vim
    if 'VIRTUAL_ENV' in os.environ:
      project_base_dir = os.environ['VIRTUAL_ENV']
      sys.path.insert(0, os.path.join(project_base_dir, 'lib', 'python%d.%d' % sys.version_info[:2], 'site-packages'))
  EOF
endif




Run python command in vim
====================
查詢 vim 對 python 支援
  :h python

執行單行 python 指令
  :py3 print("Hello")

執行多行 python 指令
  py3 << {endmarker} 
    {script} 
  {endmarker}

  script_demo.vim
    function! Foo()
      python3 << EOF
        class Foo_demo:
          def __init__(self):
            print 'Foo_demo init'
        Foo_demo()
      EOF
    endfunction

將 .vim 巨集載入 vim
  :source path_to_script/script_demo.vim

在 vim 使用巨集中的函數
  :call Foo() <= run python3 script

執行 bash 指令
 :!command	


參考資料：
  http://python.jobbole.com/86538/?utm_source=blog.jobbole.com&utm_medium=relatedPosts




備註
====================
flake8  # linter, config file: setup.cfg or .flake8 or tox.ini
japf    # formatter, https://github.com/google/yapf


